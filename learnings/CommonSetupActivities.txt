# Readme.txt
# This file contains various entitities that explains how the Compute instances were setup
# How the RDP was installed
# How the connection was created with git from remote
# First how to ensure that the Ubuntu that you are running is also able to do the RDP
1  clear
2  sudo apt-get update
3  sudo DEBIAN_FRONTEND=noninteractive apt-get -y install xfce4
4  sudo apt install xfce4-session
5  sudo apt-get -y install xrdp
6  sudo systemctl enable xrdp
7  echo xfce4-session >~/.xsession
8  sudo service xrdp restart
9  sudo passwd azureuser

# Make sure that the RDP port is enabled in the NSG in Azure, Test that the connection is working from Azure portal and then download the RDP file 
# to connect. 

# Install Chrome on the machine once done
# You'll remember to start the xrdp session everytime you boot the machine if the RDP session is not working. 

# Installing Google Chrome
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo dpkg -i google-chrome-stable_current_amd64.deb

# Next copy this file to the newly created folder. 

# If you need to find out how to add new SSH key, see the following
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh
#If you want to and might need to, its better to create a personal access token
https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token

# So what commands are needed to create the git repository from command line
# move to the folder where you've added some of the files
# you've added this Readme.txt file

 195  clear
  196  git add .
  197  git status
  198  git commit -m "Added Readme.txt file"
  199  git remote add origin git@github.com:ninadkan/MpegProcessorWithObjectDetection
  # following fails with authentication error. 
  201  git push -u -f origin master

  # so I added SSH authentication. In Git you can use https:// API, using tokens [PAT] or using 
  # SSH. I first enabled the SSH

  202  git remote -v
  203  ls -al ~/.ssh
  204  cat  ~/.ssh/known_hosts 
  205  cat  ~/.ssh/authorized_keys 
  206  ssh-keygen
  207  ssh-keygen -t ed25519 -C "ninad_kanthi@hotmail.com"
  208  ls -al ~/.ssh
  209  ssh-add ~/.ssh/id_ed25519
  210  cat ~/.ssh/id_ed25519.pub
  # now add what's displayed into the Github portal as one of the public keys. 
  211  ssh -T git@github.com
  # following still fails, because the repository does not exist
  212  git push -u -f origin master
  # lets create the repository, following fails because of password authentication is no longer accepted. 
  213  curl -u 'ninadkan' https://api.github.com/user/repos -d '{"name":"MpegProessoeWithObjectDetection", "description":"This project processes MPEG files and extractes it depending on the date stamp present in each frame"}'
  # gh is Github CLI method of creating repositories and other commands,, need tp install it 
  218  sudo apt install gitsome
  219  gh
  # in the next command, ensure that you've got the PAT and that is added when you configure the Login and Token.
  226  gh configure
  227  gh create-repo MpegProcessorWithObjectDetetion -d "This project shows how to process MPEG files and creates smaller files depending on the Date stamp present in  each frame"
  # I made a mistake of not adding '.git' at the end of repository, so I had to remove the origin and then add it back again like so

  234  echo "# MpegProcessorWithObjectDetetion" >> README.md
  235  git status
  236  git add .
  237  git commit -m "Added README.md"
  # stiil the error as the git remote origin is in an error
  238  git push -u origin master
  # Error as I cannot add as its still exists
  242  git remote add origin git@github.com:ninadkan/MpegProcessorWithObjectDetetion.git
  243  git remote -v
  245  git remote remove origin
  # There should be nothing now
  246  git remote -v
  247  git remote add origin git@github.com:ninadkan/MpegProcessorWithObjectDetetion.git
  # Now the following should work
  248  git push -u origin master
  #And yes it does. 
  # Not sure this is a good thing, as getting it setup from the portal allows lots of configuration options which are 
  # not done when doing from the command line. Such as configuring the flder for python code packages
